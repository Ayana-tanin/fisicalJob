import logging 
import asyncio
import os
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
from collections import defaultdict
import uuid

load_dotenv()
TOKEN = os.getenv("TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_added_contacts = defaultdict(set)
approved_users = {}
jobs = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–Ω–∫–µ—Ç—ã
class JobPost(StatesGroup):
    title = State()
    payment = State()
    location = State()
    age = State()
    details = State()
    contact = State()

@router.message(StateFilter(None), F.text & ~F.text.startswith("/"))
async def delete_and_notify(message: types.Message):
    await message.delete()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É", url="https://t.me/fisicalJob_bot")]]
    )
    msg = await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É", reply_markup=keyboard)
    await asyncio.sleep(300)
    await msg.delete()

@router.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", callback_data="add_contacts")],
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="get_requisites")]
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –¥–æ–±–∞–≤—å—Ç–µ 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ 100 —Å–æ–º. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_job.", reply_markup=keyboard)

@router.callback_query(F.data == "add_contacts")
async def add_contacts(callback: types.CallbackQuery):
    await callback.message.answer("–î–æ–±–∞–≤—å—Ç–µ 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É https://t.me/fisicalJob")
    await callback.answer()

@router.callback_query(F.data == "get_requisites")
async def get_requisites(callback: types.CallbackQuery):
    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} —Ö–æ—á–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.")
    await callback.message.answer("üì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã: @ant_anny")
    await callback.answer()

@router.message(Command("add_job"))
async def add_job(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    contact_count = len(user_added_contacts.get(user_id, set()))
    if contact_count < 5:
        await message.answer(f"‚ùå –í—ã –¥–æ–±–∞–≤–∏–ª–∏ {contact_count}/5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë!")
        return
    await state.set_state(JobPost.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")

@router.message(StateFilter(JobPost.title))
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(JobPost.payment)
    await message.answer("–ö–∞–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞?")

@router.message(StateFilter(JobPost.payment))
async def process_payment(message: types.Message, state: FSMContext):
    await state.update_data(payment=message.text)
    await state.set_state(JobPost.location)
    await message.answer("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞?")

@router.message(StateFilter(JobPost.location))
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(JobPost.age)
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω?")

@router.message(StateFilter(JobPost.age))
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(JobPost.details)
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è?")

@router.message(StateFilter(JobPost.details))
async def process_details(message: types.Message, state: FSMContext):
    await state.update_data(details=message.text)
    await state.set_state(JobPost.contact)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è?")

@router.message(StateFilter(JobPost.contact))
async def process_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data["contact"] = message.text
    
    job_id = str(uuid.uuid4())      
    job_post = (f"üì¢ –í–∞–∫–∞–Ω—Å–∏—è: {data['title']}\nüí∞ –û–ø–ª–∞—Ç–∞: {data['payment']}\nüìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data['location']}\nüë• –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n‚ÑπÔ∏è –£—Å–ª–æ–≤–∏—è: {data['details']}\n‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contact']}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{job_id}")]])
    msg = await bot.send_message(CHANNEL_ID, job_post, reply_markup=keyboard)
    jobs[job_id] = {
        "count": 0,
        "employer": message.chat.id,
        "applicants": [],
        "contact": data["contact"],
    }
    
    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    await state.clear()

@router.callback_query(F.data.startswith("apply_"))
async def apply(callback_query: types.CallbackQuery):
    job_id = callback_query.data.split("_")[1]
    
    user_id = callback_query.from_user.id
    username = f"@{callback_query.from_user.username}" if callback_query.from_user.username else f"[{callback_query.from_user.first_name}](tg://user?id={user_id})"

    if job_id in jobs:
    
        if user_id in jobs[job_id]["applicants"]:
            await callback_query.answer("–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.", show_alert=True)
            return

        jobs[job_id]["applicants"].append(user_id)
        jobs[job_id]["count"] += 1
        employer_id = jobs[job_id]["employer"]

        await bot.send_message(employer_id, f"üîî –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é!\nüë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: @{callback_query.from_user.username}\nüì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é.")

        if jobs[job_id]["count"] >= 15:
            applicants_info = "\n".join(
                [f"@{callback_query.from_user.username}" if callback_query.from_user.username else f"[{callback_query.from_user.first_name}](tg://user?id={user_id})"
                 for user_id in jobs[job_id]["applicants"]]
            )
            await bot.send_message(employer_id, f"üö® –í–∞–∫–∞–Ω—Å–∏—è {job_id} –∑–∞–∫—Ä—ã—Ç–∞!\n–°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏—Ö—Å—è:\n{applicants_info}")
            await bot.delete_message(CHANNEL_ID, job_id) 
            del jobs[job_id] 

    await callback_query.answer("‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é!")

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())