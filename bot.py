import logging 
import asyncio
import os
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
from collections import defaultdict

load_dotenv()
TOKEN = os.getenv("TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

user_added_contacts = defaultdict(set)
approved_users = {}
jobs = {}

class JobPost(StatesGroup):
    title = State()
    payment = State()
    location = State()
    age = State()
    details = State()
    contact = State()
    
STEPS = [
    ("title", JobPost.payment, "–ö–∞–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞?"),
    ("payment", JobPost.location, "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞?"),
    ("location", JobPost.age, "–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω?"),
    ("age", JobPost.details, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è?"),
    ("details", JobPost.contact, "–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è?"),
]

async def process_step(message: types.Message, state: FSMContext, key: str, next_state: State, question: str):
    await state.update_data(**{key: message.text})
    await state.set_state(next_state)
    await message.answer(question)

@router.message(StateFilter(None), F.text & ~F.text.startswith("/")) 
# –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï –≤ –∞–Ω–∫–µ—Ç–µ 
async def delete_and_notify(message: types.Message): 
    await message.delete() 
    keyboard = InlineKeyboardMarkup( inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É", url="https://t.me/fisicalJob_bot")]] ) 
    msg = await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É", reply_markup=keyboard) 
    await asyncio.sleep(300) 
    await msg.delete()
    
@router.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", callback_data="add_contacts")],
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="get_requisites")]
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –¥–æ–±–∞–≤—å—Ç–µ 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ 100 —Å–æ–º. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_job.", reply_markup=keyboard)

@router.callback_query(F.data == "add_contacts")
async def add_contacts(callback: types.CallbackQuery):
    await callback.message.answer("–î–æ–±–∞–≤—å—Ç–µ 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É https://t.me/fisisalJob")
    await callback.answer()

@router.callback_query(F.data == "get_requisites")
async def get_requisites(callback: types.CallbackQuery):
    username = callback.from_user.username
    user_mention = f"@{username}" if username else f"tg://user?id={callback.from_user.id}"
    
    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} —Ö–æ—á–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.")
    await callback.message.answer("üì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã: @ant_anny")
    await callback.answer()

@router.message(Command("add_job"))
async def add_job(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    contact_count = len(user_added_contacts.get(user_id, set()))
    if contact_count < -1:
        await message.answer(f"‚ùå –í—ã –¥–æ–±–∞–≤–∏–ª–∏ {contact_count}/5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë!")
        return
    await state.set_state(JobPost.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")

for key, next_state, question in STEPS:
    @router.message(StateFilter(getattr(JobPost, key)))
    async def handler(message: types.Message, state: FSMContext, key=key, next_state=next_state, question=question):
        await process_step(message, state, key, next_state, question)

@router.callback_query(F.data.startswith("apply_"))
async def process_application(callback: types.CallbackQuery):
    job_id = int(callback.data.split("_")[1])
    if job_id not in jobs:
        await callback.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    job = jobs[job_id]
    applicant_id = callback.from_user.id
    if applicant_id in job["applicants"]:
        await callback.answer("–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.")
        return
    job["applicants"].append(applicant_id)
    await callback.answer("‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç!")
    
    if len(job["applicants"]) >= 15:
        applicants_info = "\n".join([f"tg://user?id={app_id}" for app_id in job["applicants"]])
        await bot.send_message(job["employer"], f"üö® –í–∞–∫–∞–Ω—Å–∏—è {job_id} –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏–º–∏—Ç–∞ –æ—Ç–∫–ª–∏–∫–æ–≤!\n{applicants_info}")
        if "message_id" in job:
            await bot.delete_message(CHANNEL_ID, job["message_id"])
        jobs.pop(job_id)

async def main():
    logging.basicConfig(level=logging.INFO)
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())