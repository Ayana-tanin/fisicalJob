import asyncio
import json
import logging
import uuid
from collections import defaultdict
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ChatMemberUpdated
from aiogram.client.default import DefaultBotProperties
from typing import Union

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN="7754219638:AAHlCG9dLX-wJ4f6zuaPQDARkB-WtNshv8o"
CHANNEL_ID=-1002423189514
ADMIN_ID=5320545212
DATA_FILE = 'user_data.json'
ADMINS = [5320545212, 5402160054 ]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"), chat_member_updates=True)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
user_added_contacts = defaultdict(set)
jobs = {}
json_file = "user_data.json"

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump({
            "jobs": jobs,
            "user_added_contacts": {str(k): list(v) for k, v in user_added_contacts.items()}
        }, f)

def load_data():
    global jobs, user_added_contacts
    try:
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            jobs.update(data.get("jobs", {}))
            for k, v in data.get("user_added_contacts", {}).items():
                user_added_contacts[int(k)] = set(v)
    except FileNotFoundError:
        pass

class JobPost(StatesGroup):
    title = State()
    payment = State()
    location = State()
    age = State()
    details = State()
    contact = State()

class AddMembersState(StatesGroup):
    waiting_to_check = State()

@router.message(StateFilter(None), F.text & ~F.text.startswith("/"))
async def delete_message(message: types.Message):
    await message.delete()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å 1 –∫–æ–Ω—Ç–∞–∫—Ç", url="https://t.me/fisicalJob_bot")]
        ])
    msg = await message.answer("–ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É.", reply_markup=keyboard)
    await asyncio.sleep(60)
    await msg.delete()
    
@router.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", callback_data="add_contacts")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="get_requisites")],
        [InlineKeyboardButton(text="Help", callback_data="help")]
    ])
    await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ 1 –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≤—ã–∑–æ–≤–∏—Ç–µ /add_job –∏–ª–∏ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å 100 —Å–æ–º –∏ –≤—ã–ª–æ–∂–∏—Ç—å.", reply_markup=keyboard)

@router.callback_query(F.data == "add_contacts")
async def add_contacts(cb: types.CallbackQuery):
    await cb.message.answer(
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ 1 —á–µ–ª–æ–≤–µ–∫–∞ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/tezJumush")
            ]]
        )
    )
    await cb.answer()

@router.callback_query(F.data == "get_requisites")
async def get_requisites(callback: types.CallbackQuery):
    username = callback.from_user.username or "(–±–µ–∑ username)"
    await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
    await callback.message.answer("üí≥ MBank: 996 551 71 45 47\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @ant_anny. –¢–∞–∫–∂–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
    await callback.answer()
    
@router.message(Command("my_jobs"))
async def my_jobs(message: types.Message):
   


@router.message(Command("delete_job"))
async def delete_job(message: types.Message):
   

@router.callback_query(F.data == "help")
async def show_help(callback: types.CallbackQuery):
    text = (
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –≤–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —á–∞—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏—Ö—Å—è.\n"
        "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å 1 –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å 100 —Å–æ–º.\n"
        "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @ant_anny @AkylaiMamyt"
    )
    await callback.message.answer(text)
    await callback.answer()

@router.chat_member()
async def track_invites(event: ChatMemberUpdated):
    if event.chat.id != CHANNEL_ID:
        print("fuck")
        return
    new_user = event.new_chat_member
    inviter = event.from_user
    print("fuck 2")
    if inviter and new_user and inviter.id != new_user.user.id:
        print("yess")
        user_added_contacts[inviter.id].add(new_user.user.id)
        print(user_added_contacts[inviter.id])  # print updated set
        logging.info(f"User {inviter.id} added {new_user.user.id} to the group.")

@router.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")

@router.message(Command("add_job"))
async def add_job(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    print("2", len(user_added_contacts.get(user_id, set())))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å
    if len(user_added_contacts.get(user_id, set())) < 1:
        await message.answer(
            f"‚ùó –í—ã –¥–æ–±–∞–≤–∏–ª–∏ {len(user_added_contacts.get(user_id, set()))} –∏–∑ 1 —á–µ–ª–æ–≤–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."
        )
        return
    await state.set_state(JobPost.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")

@router.message(StateFilter(JobPost.title))
async def job_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(JobPost.payment)
    await message.answer("–ö–∞–∫–∞—è –æ–ø–ª–∞—Ç–∞?")

@router.message(StateFilter(JobPost.payment))
async def job_payment(message: types.Message, state: FSMContext):
    await state.update_data(payment=message.text)
    await state.set_state(JobPost.location)
    await message.answer("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞?")

@router.message(StateFilter(JobPost.location))
async def job_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(JobPost.age)
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω?")

@router.message(StateFilter(JobPost.age))
async def job_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(JobPost.details)
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è?")

@router.message(StateFilter(JobPost.details))
async def job_details(message: types.Message, state: FSMContext):
    await state.update_data(details=message.text)
    await state.set_state(JobPost.contact)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è?")

@router.message(StateFilter(JobPost.contact))
async def job_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data["contact"] = message.text
    job_id = str(uuid.uuid4())
    job_post = (
        f"üì¢ –í–∞–∫–∞–Ω—Å–∏—è: {data['title']}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {data['payment']}\n"
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data['location']}\n"
        f"üë• –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"‚ÑπÔ∏è –£—Å–ª–æ–≤–∏—è: {data['details']}\n"
        f"‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contact']}"
    )
    employer_id = message.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{job_id}")],
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º", url=f"tg://user?id={employer_id}")]
    ])
    msg = await bot.send_message(CHANNEL_ID, job_post, reply_markup=keyboard)
    jobs[job_id] = {"employer": employer_id, "applicants": [], "message_id": msg.message_id}
    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    await state.clear()

@router.callback_query(F.data.startswith("apply_"))
async def apply_job(callback: types.CallbackQuery):
    job_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    if job_id not in jobs or user_id in jobs[job_id]["applicants"]:
        await callback.answer("–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    jobs[job_id]["applicants"].append(user_id)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await bot.send_message(user_id, "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.", reply_markup=keyboard)
    await callback.answer("‚úÖ –û—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç!")

@router.message(F.contact)
async def contact_share(message: types.Message):
    user_id = message.from_user.id
    contact = message.contact.phone_number
    for job_id, job in jobs.items():
        if user_id in job["applicants"]:
            employer_id = job["employer"]
            try:
                await bot.send_message(
                    employer_id,
                    f"üì≤ –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é!\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–ë–µ–∑ username'}\n"
                    f"–ù–æ–º–µ—Ä: {contact}"
                )
                await message.answer("üì® –í–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é!", reply_markup=ReplyKeyboardRemove())
                return
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é: {e}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
    await message.answer("‚ùó –í—ã –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏.")
    
async def main():
    load_data()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
