import asyncio
import logging

from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.enums.chat_type import ChatType
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from config import ADMINS, CHANNEL_ID, CHANNEL_URL, ADMIN_USERNAME
from db_connection import (
    insert_user, save_vacancy, get_user_vacancies, delete_vacancy_by_id
)

logger = logging.getLogger(__name__)
router = Router()

class VacancyForm(StatesGroup):
    all_info = State()

async def send_job_actions(message: Message, job_id: int):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data=f"action_delete_{job_id}")],
            [InlineKeyboardButton(text="üîÑ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—â—ë", callback_data=f"create_vacancy")],
            [InlineKeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="action_contact_admin")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@router.message(
    F.chat.type != ChatType.PRIVATE,      # –ª—é–±—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ/–∫–∞–Ω–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã
    F.text & ~F.text.startswith("/")      # –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –Ω–µ –∫–æ–º–∞–Ω–¥—ã
)
async def block_non_admins(message: Message):
    if message.from_user.id not in ADMINS:
        await message.delete()
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url=CHANNEL_URL)]
        ])
        warn = await message.answer(
            "‚úâÔ∏è –ü–∏—Å–∞—Ç—å –∑–¥–µ—Å—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–∫—É –±–æ—Ç–∞:",
            reply_markup=kb
        )
        await asyncio.sleep(60)
        await warn.delete()
@router.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def start_handler(message: Message):
    await insert_user(message.from_user.id, message.from_user.username or "")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úâÔ∏è –í—ã–ª–æ–∂–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="create_vacancy"
                ),
                InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏", url=CHANNEL_URL
                )
            ]
        ]
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n\n–Ø –ø–æ–º–æ–≥—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb,
    )

@router.callback_query(F.data == "create_vacancy")
async def show_template(call: CallbackQuery, state: FSMContext):
    await call.answer()
    template = (
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –ú–æ—Å–∫–≤–∞, –°–æ–∫–æ–ª—å–Ω–∏–∫–∏\n"
        "üìù <b>–ó–∞–¥–∞—á–∞:</b> –¢—Ä–µ–±—É–µ—Ç—Å—è –≥—Ä—É–∑—á–∏–∫ –Ω–∞ 3 —á–∞—Å–∞\n"
        "üíµ <b>–û–ø–ª–∞—Ç–∞:</b> 1500 ‚ÇΩ\n"
        "‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> +7 999 123-45-67\n"
        "üìå <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ù—É–∂–µ–Ω –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n\n\n"
        "<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ, –∑–∞–º–µ–Ω–∏—Ç–µ –ø–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.</b>"
    )
    await call.message.answer(template, parse_mode=ParseMode.HTML)
    await state.set_state(VacancyForm.all_info)

@router.message(VacancyForm.all_info)
async def process_vacancy(message: Message, state: FSMContext, bot: Bot):
    # 1) –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    data: dict[str, str] = {}
    for line in message.text.splitlines():
        if ":" not in line:
            continue
        key, val = map(str.strip, line.split(":", 1))
        if key.startswith("üìç"):
            data["address"] = val
        elif key.startswith("üìù"):
            data["title"] = val
        elif key.startswith("üíµ"):
            data["payment"] = val
        elif key.startswith("‚òéÔ∏è"):
            data["contact"] = val
        elif key.startswith("üìå"):
            data["extra"] = val

    # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
    vac_text = (
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data.get('address','‚Äî')}\n"
        f"üìù <b>–ó–∞–¥–∞—á–∞:</b> {data.get('title','‚Äî')}\n"
        f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {data.get('payment','‚Äî')}\n"
        f"‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {data.get('contact','‚Äî')}\n"
    )
    if extra := data.get("extra"):
        vac_text += f"üìå <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {extra}\n"

    # 3) –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ —Å—Ä–∞–∑—É —Å –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π
    publisher_id = message.from_user.id
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è",
                    url=f"tg://user?id={publisher_id}"
                )
            ]
        ]
    )
    channel_msg = await bot.send_message(
        chat_id=CHANNEL_ID,
        text=vac_text,
        parse_mode=ParseMode.HTML,
        reply_markup=kb
    )

    # 4) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏ –ø–æ–ª—É—á–∏—Ç—å job_id
    job_id = await save_vacancy(
        user_id=publisher_id,
        message_id=channel_msg.message_id,
        data=data
    )

    # 5) –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä—É + –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π
    await message.answer(
        f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!\n\n"
        f"üÜî ID –≤–∞–∫–∞–Ω—Å–∏–∏: <b>{job_id}</b>",
        parse_mode=ParseMode.HTML
    )
    await send_job_actions(message, job_id)
    await state.clear()


@router.callback_query(F.data.startswith("reply_"))
async def reply_publisher(call: CallbackQuery, bot: Bot):
    await call.answer()

    # callback_data = "reply_<job_id>_<publisher_tg>"
    _, _, publisher_tg_str = call.data.split("_", 2)
    publisher_id = int(publisher_tg_str)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì® –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é",
                    url=f"tg://user?id={publisher_id}"
                )
            ]
        ]
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ, –≥–¥–µ –±—ã–ª–∞ ¬´–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è¬ª
    await bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=kb
    )

@router.callback_query(F.data.startswith("action_delete_"))
async def action_delete(call: CallbackQuery, bot: Bot):
    await call.answer()
    job_id = int(call.data.rsplit("_", 1)[1])
    msg_id = await delete_vacancy_by_id(job_id)
    if msg_id:
        await bot.delete_message(CHANNEL_ID, msg_id)
        await call.message.edit_text(f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è {job_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await call.message.edit_text(f"–í–∞–∫–∞–Ω—Å–∏—è {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

@router.callback_query(F.data == "action_contact_admin")
async def action_contact_admin(call: CallbackQuery):
    await call.answer()
    await call.message.answer(f"üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @{ADMIN_USERNAME}")

async def send_job_actions(message: Message, job_id: int):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é",
                callback_data=f"action_delete_{job_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é",
                callback_data="create_vacancy"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º",
                callback_data="action_contact_admin"
            )
        ],
    ])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

