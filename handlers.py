import re
import asyncio
import logging

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.enums import ChatType, ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import update

from db_connection import (
    insert_user,
    save_vacancy,
    get_user_vacancies,
    delete_vacancy_by_id,
    get_session
)
from models import Job
from config import CHANNEL_ID, CHANNEL_URL, ADMINS

logger = logging.getLogger(__name__)
router = Router()

class VacancyForm(StatesGroup):
    all_info = State()

# –®–∞–±–ª–æ–Ω—ã –ø–æ–ª–µ–π –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
TEMPLATE = {
    "address": r"^üìç\s*–ê–¥—Ä–µ—Å:\s*(.+)$",
    "title":   r"^üìù\s*–ó–∞–¥–∞—á–∞:\s*(.+)$",
    "payment": r"^üíµ\s*–û–ø–ª–∞—Ç–∞:\s*(.+)$",
    "contact": r"^‚òéÔ∏è\s*–ö–æ–Ω—Ç–∞–∫—Ç:\s*(.+)$",
    "extra":   r"^üìå\s*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\s*(.*)$",
}
PHONE_RE = re.compile(r"^\+?\d[\d\s\-]{7,}\d$")
kb_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –í—ã–ª–æ–∂–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="create")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="list")],
        [InlineKeyboardButton(text="üåê –ö–∞–Ω–∞–ª", url=CHANNEL_URL)]
    ])

# /start ‚Äî —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
@router.message(
    CommandStart(),
    F.chat.type == ChatType.PRIVATE
)
async def cmd_start(msg: Message):
    await insert_user(msg.from_user.id, msg.from_user.username or "")
    await msg.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_menu
    )

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
@router.callback_query(F.data == "create")
async def prepare_vacancy(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
        "üìç –ê–¥—Ä–µ—Å: –ë–∏—à–∫–µ–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞ 1\n"
        "üìù –ó–∞–¥–∞—á–∞: –ö—É—Ä—å–µ—Ä –Ω–∞ 2 —á–∞—Å–∞\n"
        "üíµ –û–ø–ª–∞—Ç–∞: 500 —Å–æ–º\n"
        "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: +996501234567\n"
        "üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(VacancyForm.all_info)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
@router.message(VacancyForm.all_info)
async def process_vacancy(msg: Message, state: FSMContext, bot: Bot):
    data = {}
    for line in msg.text.splitlines():
        for key, pat in TEMPLATE.items():
            m = re.match(pat, line.strip())
            if m:
                data[key] = m.group(1).strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    for fld in ("address", "title", "payment", "contact"):
        if fld not in data:
            await msg.reply(f"‚ùå –ü–æ–ª–µ '{fld}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ —à–∞–±–ª–æ–Ω—É.")
            return
    if not PHONE_RE.match(data["contact"]):
        await msg.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +996501234567")
        return
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    job = await save_vacancy(msg.from_user.id, data)
    if job is None:
        await msg.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
        await state.clear()
        return
    if job == 0:
        await msg.reply("üîî –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤–∞–∫–∞–Ω—Å–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.")
        await state.clear()
        return
    # URL –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞
    if msg.from_user.username:
        reply_url = f"https://t.me/{msg.from_user.username}"
    else:
        reply_url = f"tg://user?id={msg.from_user.id}"
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", url=reply_url)]
    ])
    posted = await bot.send_message(
        chat_id=CHANNEL_ID,
        text=(f"‚ú® <b>–í–∞–∫–∞–Ω—Å–∏—è: {data['title']}</b> ‚ú®\n"
            f"üìç–ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üíµ–û–ø–ª–∞—Ç–∞: {data['payment']}\n"
            f"‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
            + (f"\nüìå–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {data['extra']}" if data.get("extra") else "")
        ),
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    async with get_session() as session:
        await session.execute(
            update(Job).where(Job.id == job.id).values(message_id=posted.message_id)
        )
        await session.commit()
    await msg.answer("‚úÖ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. \n\n –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–∑–æ–≤–∏—Ç–µ –º–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏",
                     reply_markup=kb_menu)
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
@router.callback_query(F.data == "list")
async def list_vacancies(call: CallbackQuery):
    await call.answer()
    vacs = await get_user_vacancies(call.from_user.id)
    if not vacs:
        return await call.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")

    buttons = []
    import json
    for job in vacs:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
        if not job.message_id:
            continue
        info = job.all_info
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if isinstance(info, dict):
            title = info.get('title', f"#{job.id}")
        else:
            try:
                info_dict = json.loads(info)
                title = info_dict.get('title', f"#{job.id}")
            except:
                title = f"#{job.id}"
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {title}",
                callback_data=f"del:{job.id}"
            )
        ])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.answer("–í–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=kb)

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –ë–î
@router.callback_query(lambda c: c.data and c.data.startswith("del:"))
async def delete_vacancy_handler(call: CallbackQuery, bot: Bot):
    await call.answer()
    vid = int(call.data.split(":",1)[1])
    # –ø–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    vacs = await get_user_vacancies(call.from_user.id)
    job = next((j for j in vacs if j.id == vid), None)
    if not job:
        return await call.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä.", show_alert=True)
    # —É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
    if job.message_id:
        try:
            await bot.delete_message(chat_id=CHANNEL_ID, message_id=job.message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ #{vid}: {e}")
    # —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    ok = await delete_vacancy_by_id(vid)
    if ok:
        await call.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
        new_buttons = [row for row in call.message.reply_markup.inline_keyboard if row[0].callback_data != f"del:{vid}"]
        await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_buttons))
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)

# –°–ª–µ–¥—É—é—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä... –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –∏–∑ –±–∞–∑—ã
@router.callback_query(lambda c: c.data and c.data.startswith("del:"))
async def delete_vacancy_handler(call: CallbackQuery, bot: Bot):
    await call.answer()
    vid = int(call.data.split(":",1)[1])
    # –ø–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
    job = await get_user_vacancies(call.from_user.id)
    job = next((j for j in job if j.id == vid), None)
    if not job:
        return await call.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    # —É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
    if job.message_id:
        try:
            await bot.delete_message(chat_id=CHANNEL_ID, message_id=job.message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ #{vid}: {e}")
    # —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
    ok = await delete_vacancy_by_id(vid)
    if ok:
        await call.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª—ë–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        new_buttons = [row for row in call.message.reply_markup.inline_keyboard if not row[0].callback_data == f"del:{vid}"]
        await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_buttons))
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]))
async def block_non_admins(message: Message):
    try:
        user_id = message.from_user.id if message.from_user else None
        if user_id not in ADMINS:
            logger.info(f"–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {message.chat.id}")
            await message.delete()
            bot_user = await message.bot.get_me()
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é",
                    url=f"https://t.me/{bot_user.username}"                )]
            ])
            warn = await message.answer(
                "<b>–°–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –æ—Ç –±–æ—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!</b>\n\n"
                "–ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–∫—É –±–æ—Ç–∞.",
                reply_markup=kb,
                parse_mode=ParseMode.HTML
            )
            await asyncio.sleep(120)
            try:
                await warn.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ block_non_admins: {e}")
